<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux系统基础知识</title>
      <link href="/posts/e9246142/"/>
      <url>/posts/e9246142/</url>
      
        <content type="html"><![CDATA[<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>Linux系统是一种自由和开放源代码的操作系统，它的特点是高度的稳定性、安全性和可靠性。作为一个博客写手，在学习Linux系统基础知识时，我们需要了解一些关键概念和基本操作，以便更好地理解和使用Linux系统。</p><h2 id="一、Linux系统的基本概念"><a href="#一、Linux系统的基本概念" class="headerlink" title="一、Linux系统的基本概念"></a>一、Linux系统的基本概念</h2><h4 id="1-内核"><a href="#1-内核" class="headerlink" title="1.内核"></a>1.内核</h4><p>内核是Linux系统的核心组件，它是操作系统的主要部分，主要负责管理系统的资源和提供各种服务。内核的主要功能包括文件系统管理、进程管理、内存管理、设备驱动程序管理等。</p><h4 id="2-发行版"><a href="#2-发行版" class="headerlink" title="2.发行版"></a>2.发行版</h4><p>Linux系统有许多不同的发行版，每个发行版都有自己的特点和优点。常见的Linux发行版包括Ubuntu、Debian、CentOS、Fedora等。</p><p>Shell<br>Shell是Linux系统的命令行解释器，它是用户与系统交互的主要方式。常见的Shell包括Bash、Zsh、Ksh等。</p><h4 id="4-文件系统"><a href="#4-文件系统" class="headerlink" title="4.文件系统"></a>4.文件系统</h4><p>Linux系统的文件系统是一种层次结构，所有的文件和目录都存储在根目录下。常见的文件系统包括ext4、NTFS、FAT32等。</p><h2 id="二、Linux系统的基本操作"><a href="#二、Linux系统的基本操作" class="headerlink" title="二、Linux系统的基本操作"></a>二、Linux系统的基本操作</h2><h4 id="1-文件和目录操作"><a href="#1-文件和目录操作" class="headerlink" title="1.文件和目录操作"></a>1.文件和目录操作</h4><p>Linux系统中，文件和目录是基本的操作对象。我们可以通过ls、cd、mkdir、rm等命令来进行相关的操作。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls：列出当前目录下的所有文件和目录。</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd：切换当前目录。</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir：创建一个新的目录。</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm：删除文件或目录。</span><br></pre></td></tr></table></figure><h4 id="2-文件编辑"><a href="#2-文件编辑" class="headerlink" title="2.文件编辑"></a>2.文件编辑</h4><p>在Linux系统中，我们可以使用vi、nano等编辑器来编辑文件。例如，使用vi编辑器打开一个文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi filename</span><br></pre></td></tr></table></figure><p>然后按下i键进入编辑模式，进行编辑。编辑完成后，按下Esc键回到命令模式，输入:wq保存并退出。</p><h4 id="3-进程管理"><a href="#3-进程管理" class="headerlink" title="3.进程管理"></a>3.进程管理</h4><p>在Linux系统中，我们可以使用ps、kill等命令来管理进程。例如，使用ps命令查看当前运行的进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure><p>然后使用kill命令结束某个进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure><p>其中PID为进程的ID号。</p><h4 id="4-软件安装"><a href="#4-软件安装" class="headerlink" title="4.软件安装"></a>4.软件安装</h4><p>在Linux系统中，我们可以使用apt、yum等命令来安装软件。例如，使用apt-get命令安装一个软件包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install package_name</span><br></pre></td></tr></table></figure><h2 id="三、Linux系统的实例操作"><a href="#三、Linux系统的实例操作" class="headerlink" title="三、Linux系统的实例操作"></a>三、Linux系统的实例操作</h2><p>下面我们来介绍一些Linux系统的实例操作。</p><h4 id="1-查看系统信息"><a href="#1-查看系统信息" class="headerlink" title="1.查看系统信息"></a>1.查看系统信息</h4><p>我们可以使用uname命令来查看系统信息，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p>该命令可以显示系统的内核版本、处理器类型、操作系统类型等信息。</p><h4 id="2-查看磁盘空间"><a href="#2-查看磁盘空间" class="headerlink" title="2.查看磁盘空间"></a>2.查看磁盘空间</h4><p>我们可以使用df命令来查看磁盘空间使用情况，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><p>该命令可以显示磁盘的总容量、已用容量、剩余容量等信息。</p><h4 id="3-查看进程资源占用情况"><a href="#3-查看进程资源占用情况" class="headerlink" title="3.查看进程资源占用情况"></a>3.查看进程资源占用情况</h4><p>我们可以使用top命令来查看进程资源占用情况，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><p>该命令可以显示当前系统中运行的进程，以及它们所占用的CPU、内存等资源的情况。</p><h4 id="4-配置网络"><a href="#4-配置网络" class="headerlink" title="4.配置网络"></a>4.配置网络</h4><p>我们可以使用ifconfig命令来配置网络，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig eth0 192.168.1.100 netmask 255.255.255.0</span><br></pre></td></tr></table></figure><p>该命令可以将eth0网卡的IP地址设置为192.168.1.100，子网掩码为255.255.255.0。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文介绍了Linux系统的基本概念和基本操作，希望能够帮助读者更好地理解和使用Linux系统。在使用Linux系统时，我们需要了解一些关键概念和基本操作，以便更好地应对不同的场景和需求。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何训练自己的AI模型</title>
      <link href="/posts/e6d843ee/"/>
      <url>/posts/e6d843ee/</url>
      
        <content type="html"><![CDATA[<h1 id="如何训练自己的AI模型"><a href="#如何训练自己的AI模型" class="headerlink" title="如何训练自己的AI模型"></a>如何训练自己的AI模型</h1><p>人工智能（AI）是当前最热门的技术之一。许多人都被AI的各种应用和可能性所吸引，但是如何训练自己的AI模型呢？本文将介绍如何训练自己的AI模型，并提供一些代码和讲解。</p><ul><li><p>确定问题</p><p>首先，你需要确定要解决的问题。例如，你可能想要训练一个模型来识别图像中的物体，或者你可能想要训练一个模型来预测股票价格。无论你想要解决的问题是什么，你需要确保你有足够的数据来训练模型。</p></li><li><p>收集数据</p><p>一旦你确定了要解决的问题，你需要开始收集数据。这可能是最困难的部分之一，因为你需要确保你收集到的数据是准确的，并且涵盖了所有可能的情况。例如，如果你要训练一个模型来识别猫和狗的图像，你需要确保你有足够的猫和狗的图像，并且这些图像涵盖了所有可能的猫和狗的品种。</p></li><li><p>准备数据</p><p>一旦你收集到了足够的数据，你需要准备数据以供训练。这可能包括将图像转换为数字表示形式，或者将文本分词并向量化。你还需要将数据分成训练集和测试集，以便你可以评估模型的性能。</p></li><li><p>选择模型</p><p>现在，你需要选择要使用的模型。这可能包括深度学习模型，例如卷积神经网络（CNN）或循环神经网络（RNN），或者传统的机器学习模型，例如决策树或支持向量机（SVM）。</p></li><li><p>训练模型</p><p>一旦你选择了模型，你需要开始训练模型。训练模型可能需要一定的时间和计算资源，具体取决于你选择的模型和数据集的大小。你可以使用训练数据来训练模型，并使用测试数据来评估模型的性能。</p></li><li><p>调整模型</p><p>在训练模型时，你可能需要对模型进行调整，以提高其性能。这可能包括更改模型的超参数，例如学习率或正则化参数，或者使用不同的优化算法。</p></li><li><p>部署模型</p><p>最后，你需要将训练好的模型部署到生产环境中。这可能包括将模型打包成可执行文件或Web服务，并将其部署到云端或本地服务器上。</p></li></ul><div class="note info flat"><p>下面是一个使用Python和TensorFlow训练图像分类模型的示例代码 </p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据生成器</span></span><br><span class="line">train_datagen = ImageDataGenerator(rescale=<span class="number">1.</span>/<span class="number">255</span>)</span><br><span class="line">test_datagen = ImageDataGenerator(rescale=<span class="number">1.</span>/<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">train_data = train_datagen.flow_from_directory(</span><br><span class="line">        <span class="string">&#x27;train&#x27;</span>,</span><br><span class="line">        target_size=(<span class="number">224</span>, <span class="number">224</span>),</span><br><span class="line">        batch_size=<span class="number">32</span>,</span><br><span class="line">        class_mode=<span class="string">&#x27;binary&#x27;</span>)</span><br><span class="line"></span><br><span class="line">test_data = test_datagen.flow_from_directory(</span><br><span class="line">        <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">        target_size=(<span class="number">224</span>, <span class="number">224</span>),</span><br><span class="line">        batch_size=<span class="number">32</span>,</span><br><span class="line">        class_mode=<span class="string">&#x27;binary&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=(<span class="number">224</span>, <span class="number">224</span>, <span class="number">3</span>)),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">128</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">1</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译模型</span></span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;binary_crossentropy&#x27;</span>, optimizer=<span class="string">&#x27;adam&#x27;</span>, metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model.fit(train_data, epochs=<span class="number">10</span>, validation_data=test_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存模型</span></span><br><span class="line">model.save(<span class="string">&#x27;model.h5&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用了Keras的ImageDataGenerator来加载和准备数据。</p><p>我们定义了一个包含三个卷积层和两个全连接层的卷积神经网络模型，并使用二元交叉熵作为损失函数和Adam优化器进行训练。我们使用fit()方法将模型拟合到训练数据上，并使用validation_data参数将测试数据用于验证。最后，我们使用save()方法将训练好的模型保存到磁盘上。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>训练自己的AI模型需要一定的技术和计算资源，但是它可以为你提供无数的机会和可能性。本文提供了一些关于如何训练自己的AI模型的指导，以及一个使用Python和TensorFlow训练图像分类模型的示例代码。希望这些可以帮助你开始构建自己的AI应用程序。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT的使用方法与搭建指南</title>
      <link href="/posts/e16da47/"/>
      <url>/posts/e16da47/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>ChatGPT是一种基于GPT模型的聊天机器人，可以用于生成自然语言对话。本文将介绍ChatGPT的使用方法以及如何搭建一个自己的ChatGPT模型。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>使用ChatGPT非常简单，只需要调用API即可。以下是一个Python示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line">openai.api_key = <span class="string">&quot;YOUR_API_KEY&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_response</span>(<span class="params">prompt</span>):</span><br><span class="line">    response = openai.Completion.create(</span><br><span class="line">        engine=<span class="string">&quot;davinci&quot;</span>,</span><br><span class="line">        prompt=prompt,</span><br><span class="line">        temperature=<span class="number">0.7</span>,</span><br><span class="line">        max_tokens=<span class="number">1024</span>,</span><br><span class="line">        top_p=<span class="number">1</span>,</span><br><span class="line">        frequency_penalty=<span class="number">0</span>,</span><br><span class="line">        presence_penalty=<span class="number">0</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].text.strip()</span><br></pre></td></tr></table></figure><p>以上代码中的YOUR_API_KEY需要替换成你自己的OpenAI API Key。generate_response函数接受一个输入字符串prompt，返回一个生成的回复字符串。</p><h1 id="搭建指南"><a href="#搭建指南" class="headerlink" title="搭建指南"></a>搭建指南</h1><p>如果你想要搭建一个自己的ChatGPT模型，可以按照以下步骤进行：</p><p>注册OpenAI账号并获取API Key。</p><p>安装OpenAI Python SDK：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openai</span><br></pre></td></tr></table></figure><p>创建一个新的OpenAI Engine。在OpenAI网站上，进入Dashboard -&gt; Engines -&gt; Create New Engine，填写相应的信息并创建,训练模型。</p><p>可以通过上传数据集来训练模型，也可以使用OpenAI提供的数据集。在OpenAI网站上，进入Dashboard -&gt; Datasets -&gt; Create New Dataset，填写相应的信息并上传数据集。</p><p>在Dashboard -&gt; Models -&gt; Create New Model，选择刚刚创建的数据集以及自己喜欢的模型类型，开始训练模型。<br>使用API进行推理。可以使用类似上面Python示例代码的方法进行推理。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文介绍了ChatGPT的使用方法以及如何搭建一个自己的ChatGPT模型。ChatGPT是一种非常强大的自然语言生成模型，可以应用于多种场景，如智能客服、聊天机器人等。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识与介绍</title>
      <link href="/posts/a8d938ac/"/>
      <url>/posts/a8d938ac/</url>
      
        <content type="html"><![CDATA[<p>-</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java是一种面向对象的编程语言，由Sun Microsystems公司于1995年推出。Java是一种跨平台的语言，可以在各种操作系统上运行。Java具有简单、可移植、分布式、高效、安全等特点，因此被广泛应用于Web开发、企业级应用开发、游戏开发等领域。</p><p>本篇文章将详细介绍Java基础知识，包括Java语言特性、数据类型、运算符、流程控制、数组、类和对象、继承、接口、异常处理等内容，并附有代码样例与讲解。</p><h2 id="Java语言特性"><a href="#Java语言特性" class="headerlink" title="Java语言特性"></a>Java语言特性</h2><h3 id="Java语言具有以下特性："><a href="#Java语言具有以下特性：" class="headerlink" title="Java语言具有以下特性："></a>Java语言具有以下特性：</h3><ul><li>面向对象：Java是一种面向对象的语言，支持封装、继承和多态等特性。</li><li>跨平台：Java通过虚拟机实现跨平台，可以在各种操作系统上运行。</li><li>自动内存管理：Java具有垃圾回收机制，可以自动管理内存。</li><li>异常处理：Java提供了异常处理机制，可以有效提高程序的健壮性。</li><li>多线程：Java支持多线程编程，可以充分发挥多核CPU的性能。</li><li>扩展性：Java可以通过类库和接口实现扩展性。</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Java中的数据类型分为基本数据类型和引用数据类型。</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>Java中的基本数据类型包括：</p><ul><li>byte：8位有符号整数，取值范围为-128~127。</li><li>short：16位有符号整数，取值范围为-32768~32767。</li><li>int：32位有符号整数，取值范围为-2147483648~2147483647。</li><li>long：64位有符号整数，取值范围为-9223372036854775808~9223372036854775807。</li><li>float：32位单精度浮点数。</li><li>double：64位双精度浮点数。</li><li>boolean：布尔类型，取值为true或false。</li><li>char：16位Unicode字符。</li><li><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3>Java中的引用数据类型包括：</li><li>类</li><li>接口</li><li>数组</li><li>运算符</li></ul><div class="note info flat"><p>Java中的运算符包括算术运算符、关系运算符、逻辑运算符、位运算符等。 </p></div><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><div class="note info flat"><p>Java中的算术运算符包括加法、减法、乘法、除法、取模等。 </p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b; <span class="comment">// c = 13</span></span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> a - b; <span class="comment">// d = 7</span></span><br><span class="line"><span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> a * b; <span class="comment">// e = 30</span></span><br><span class="line"><span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> a / b; <span class="comment">// f = 3</span></span><br><span class="line"><span class="type">int</span> <span class="variable">g</span> <span class="operator">=</span> a % b; <span class="comment">// g = 1</span></span><br></pre></td></tr></table></figure><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>Java中的关系运算符包括大于、小于、等于、不等于、大于等于、小于等于等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">c</span> <span class="operator">=</span> a &gt; b; <span class="comment">// c = true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> a &lt; b; <span class="comment">// d = false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">e</span> <span class="operator">=</span> a == b; <span class="comment">// e = false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">f</span> <span class="operator">=</span> a != b; <span class="comment">// f = true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">g</span> <span class="operator">=</span> a &gt;= b; <span class="comment">// g = true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">h</span> <span class="operator">=</span> a &lt;= b; <span class="comment">// h = false</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>Java中的逻辑运算符包括与、或、非等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">c</span> <span class="operator">=</span> a &amp;&amp; b; <span class="comment">// c = false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> a || b; <span class="comment">// d = true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">e</span> <span class="operator">=</span> !a; <span class="comment">// e = false</span></span><br></pre></td></tr></table></figure><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>Java中的位运算符包括按位与、按位或、按位异或、按位取反等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 1010</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">// 0011</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a &amp; b; <span class="comment">// c = 0010</span></span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> a | b; <span class="comment">// d = 1011</span></span><br><span class="line"><span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> a ^ b; <span class="comment">// e = 1001</span></span><br><span class="line"><span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> ~a; <span class="comment">// f = 0101</span></span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>Java中的流程控制包括条件语句、循环语句、跳转语句等。</p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>Java中的条件语句包括if语句、switch语句等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;a is positive&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;a is negative&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;a is zero&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (b) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;b is 1&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;b is 2&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;b is other number&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>Java中的循环语句包括for循环、while循环、do-while循环等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(j);</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">System.out.println(k);</span><br><span class="line">k++;</span><br><span class="line">&#125; <span class="keyword">while</span> (k &lt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h3><p>Java中的跳转语句包括break语句、continue语句、return语句等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 跳出循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (j == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// 跳过本次循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b; <span class="comment">// 返回值并结束方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>Java中的数组是一种引用数据类型，可以存储多个相同类型的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">numbers[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">numbers[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">numbers[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">numbers[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">numbers[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    System.out.println(numbers[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>Java中的类是一种引用数据类型，用于描述具有相同属性和方法的一组对象。Java中的对象是类的一个实例，具有特定的属性和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, my name is &quot;</span> + name + <span class="string">&quot;, I&#x27;m &quot;</span> + age + <span class="string">&quot; years old.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">18</span>);</span><br><span class="line">person.sayHello();</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>Java中的继承是一种面向对象的编程技术，用于创建新的类，新的类继承了现有类的属性和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m eating.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m barking.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">dog.eat();</span><br><span class="line">dog.bark();</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>Java中的接口是一种特殊的类，用于定义一组方法的规范，实现接口的类必须实现接口中定义的所有方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m flying.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Bird</span> <span class="variable">bird</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">bird.fly();</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>Java中的异常处理是一种机制，用于处理程序运行中发生的异常情况，提高程序的健壮性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Divided by zero.&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Finally block.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本篇文章详细介绍了Java基础知识，包括Java语言特性、数据类型、运算符、流程控制、数组、类和对象、继承、接口、异常处理等内容，并附有代码样例与讲解。希望读者可以通过本文对Java有更深入的了解。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫样例：爬取豆瓣电影Top250</title>
      <link href="/posts/a72f2439/"/>
      <url>/posts/a72f2439/</url>
      
        <content type="html"><![CDATA[<h1 id="Python爬虫样例：爬取豆瓣电影Top250"><a href="#Python爬虫样例：爬取豆瓣电影Top250" class="headerlink" title="Python爬虫样例：爬取豆瓣电影Top250"></a>Python爬虫样例：爬取豆瓣电影Top250</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着互联网的发展，爬虫技术在数据采集和分析方面越来越重要。本文将介绍如何使用Python编写一个爬虫，爬取豆瓣电影Top250的数据，并将结果保存到本地文件中。</p><p>准备工作 在开始编写爬虫之前，我们需要安装一些必要的工具和库：<br>Python 3.x<br>requests库<br>BeautifulSoup库<br><div class="note info flat"><p>这里注意未安装相应的库，是无法运行的哦~ </p></div><br>我们可以通过pip命令来安装这些库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><h2 id="爬虫实现"><a href="#爬虫实现" class="headerlink" title="爬虫实现"></a>爬虫实现</h2><p>分析目标网页<br>首先，我们需要分析目标网页的结构和内容。在本例中，我们要爬取的是豆瓣电影Top250，其网址为：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://movie.douban.com/top250</span><br></pre></td></tr></table></figure></p><p>打开网页后，我们可以看到每部电影都有一张海报、标题、评分、导演和主演等信息。这些信息都是我们需要爬取的内容。</p><p>发送请求并获取HTML<br>在Python中，我们可以使用requests库来发送HTTP请求并获取HTML代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://movie.douban.com/top250&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line">html = response.text</span><br></pre></td></tr></table></figure><p>上述代码中，我们首先定义了目标网页的URL和请求头部。由于豆瓣网站有反爬虫机制，我们需要在请求头中添加User-Agent信息，模拟浏览器访问网页。<br>然后，我们使用requests库发送HTTP请求，并获取响应。最后，我们将响应的HTML代码保存到html变量中。<br>解析HTML并获取数据<br>获取HTML代码后，我们需要使用BeautifulSoup库来解析HTML，并提取需要的数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">movies = soup.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;item&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> movie <span class="keyword">in</span> movies:</span><br><span class="line">title = movie.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;title&#x27;</span>).text</span><br><span class="line">rating = movie.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;rating_num&#x27;</span>).text</span><br><span class="line">director = movie.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;bd&#x27;</span>).p.text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">1</span>].strip().split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">actors = [actor.strip() <span class="keyword">for</span> actor <span class="keyword">in</span> movie.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;bd&#x27;</span>).p.text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">2</span>].strip().split(<span class="string">&#x27;/&#x27;</span>)]</span><br><span class="line"><span class="built_in">print</span>(title, rating, director, actors)</span><br></pre></td></tr></table></figure><p>上述代码中，我们首先使用BeautifulSoup库解析HTML代码，并找到所有电影的div元素。</p><p>然后，我们使用find()方法来查找每个电影的标题、评分、导演和主演等信息，并将它们保存到变量中。</p><p>保存数据到本地文件<br>最后，我们可以将爬取到的数据保存到本地文件中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;top250.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">writer = csv.writer(f)</span><br><span class="line">writer.writerow([<span class="string">&#x27;标题&#x27;</span>, <span class="string">&#x27;评分&#x27;</span>, <span class="string">&#x27;导演&#x27;</span>, <span class="string">&#x27;主演&#x27;</span>])</span><br><span class="line"><span class="keyword">for</span> movie <span class="keyword">in</span> movies:</span><br><span class="line">    title = movie.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;title&#x27;</span>).text</span><br><span class="line">    rating = movie.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;rating_num&#x27;</span>).text</span><br><span class="line">    director = movie.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;bd&#x27;</span>).p.text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">1</span>].strip().split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    actors = [actor.strip() <span class="keyword">for</span> actor <span class="keyword">in</span> movie.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;bd&#x27;</span>).p.text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">2</span>].strip().split(<span class="string">&#x27;/&#x27;</span>)]</span><br><span class="line">    writer.writerow([title, rating, director, actors])</span><br></pre></td></tr></table></figure><p>上述代码中，我们使用csv库来创建一个CSV文件，并将表头和每个电影的信息写入文件中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了如何使用Python编写一个爬虫，爬取豆瓣电影Top250的数据，并将结果保存到本地文件中。在爬虫的实现过程中，我们使用了requests和BeautifulSoup库来发送HTTP请求、解析HTML和提取数据。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础知识与介绍</title>
      <link href="/posts/4e319bd5/"/>
      <url>/posts/4e319bd5/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Python是一种高级编程语言，其简单易学、可读性高等特点使其成为了广受欢迎的编程语言之一。本文将从以下几个方面对Python的基础知识进行讲解。</p><h1 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h1><p>在Python中，变量是用来存储数据的容器，可以通过赋值来创建变量。Python中的数据类型包括整型、浮点型、布尔型、字符串型等。其中，整型和浮点型可以进行数值计算，布尔型表示真假，字符串型表示文本。</p><h2 id="创建整型变量"><a href="#创建整型变量" class="headerlink" title="创建整型变量"></a>创建整型变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="创建浮点型变量"><a href="#创建浮点型变量" class="headerlink" title="创建浮点型变量"></a>创建浮点型变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num2 = <span class="number">3.14</span></span><br></pre></td></tr></table></figure><h2 id="创建布尔型变量"><a href="#创建布尔型变量" class="headerlink" title="创建布尔型变量"></a>创建布尔型变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">is_true = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="创建字符串型变量"><a href="#创建字符串型变量" class="headerlink" title="创建字符串型变量"></a>创建字符串型变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;Hello, world!&quot;</span></span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>Python中的运算符包括算术运算符、比较运算符、逻辑运算符等。其中，算术运算符用于数值计算，比较运算符用于比较大小，逻辑运算符用于进行逻辑运算。</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a + b)  <span class="comment"># 加法运算</span></span><br><span class="line"><span class="built_in">print</span>(a - b)  <span class="comment"># 减法运算</span></span><br><span class="line"><span class="built_in">print</span>(a * b)  <span class="comment"># 乘法运算</span></span><br><span class="line"><span class="built_in">print</span>(a / b)  <span class="comment"># 除法运算</span></span><br><span class="line"><span class="built_in">print</span>(a % b)  <span class="comment"># 取模运算</span></span><br><span class="line"><span class="built_in">print</span>(a ** b)  <span class="comment"># 幂运算</span></span><br></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a &gt; b)  <span class="comment"># 大于</span></span><br><span class="line"><span class="built_in">print</span>(a &lt; b)  <span class="comment"># 小于</span></span><br><span class="line"><span class="built_in">print</span>(a &gt;= b)  <span class="comment"># 大于等于</span></span><br><span class="line"><span class="built_in">print</span>(a &lt;= b)  <span class="comment"># 小于等于</span></span><br><span class="line"><span class="built_in">print</span>(a == b)  <span class="comment"># 等于</span></span><br><span class="line"><span class="built_in">print</span>(a != b)  <span class="comment"># 不等于</span></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> b)  <span class="comment"># 与运算</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> b)  <span class="comment"># 或运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> a)  <span class="comment"># 非运算</span></span><br></pre></td></tr></table></figure><h1 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h1><p>在Python中，控制语句包括条件语句和循环语句。条件语句用于根据条件来执行不同的代码块，循环语句用于重复执行代码块。</p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成年人&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未成年人&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d*%d=%d&quot;</span> % (j, i, i * j), end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数是一段可重复使用的代码块，可以接受参数和返回值。在Python中，定义函数使用def关键字。</p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h1 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h1><p>模块是Python中的一个文件，包含了一些函数、变量等。使用模块可以方便地重复利用代码。而包则是一组相关模块的集合，方便组织和管理代码。</p><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="使用模块中的函数"><a href="#使用模块中的函数" class="headerlink" title="使用模块中的函数"></a>使用模块中的函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><h2 id="导入包中的模块"><a href="#导入包中的模块" class="headerlink" title="导入包中的模块"></a>导入包中的模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> package1 <span class="keyword">import</span> module1</span><br></pre></td></tr></table></figure><h2 id="使用模块中的函数-1"><a href="#使用模块中的函数-1" class="headerlink" title="使用模块中的函数"></a>使用模块中的函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(module1.add(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>在Python中，异常处理可以用于处理程序运行过程中可能出现的错误。使用try和except关键字可以捕捉并处理异常。</p><h2 id="异常处理-1"><a href="#异常处理-1" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;除数不能为0&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文对Python的基础知识进行了讲解，包括变量和数据类型、运算符、控制语句、函数、模块和包、异常处理等。掌握这些基础知识对于学习Python编程是非常重要的。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
